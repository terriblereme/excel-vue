{"remainingRequest":"D:\\liu\\company\\excel报表\\execl-protal\\node_modules\\thread-loader\\dist\\cjs.js!D:\\liu\\company\\excel报表\\execl-protal\\node_modules\\babel-loader\\lib\\index.js!D:\\liu\\company\\excel报表\\execl-protal\\node_modules\\eslint-loader\\index.js??ref--14-0!D:\\liu\\company\\excel报表\\execl-protal\\src\\api\\exportExcel.js","dependencies":[{"path":"D:\\liu\\company\\excel报表\\execl-protal\\src\\api\\exportExcel.js","mtime":1676356474064},{"path":"D:\\liu\\company\\excel报表\\execl-protal\\babel.config.js","mtime":1639197980677},{"path":"D:\\liu\\company\\excel报表\\execl-protal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1669859218110},{"path":"D:\\liu\\company\\excel报表\\execl-protal\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1669859218094},{"path":"D:\\liu\\company\\excel报表\\execl-protal\\node_modules\\babel-loader\\lib\\index.js","mtime":1669859218625},{"path":"D:\\liu\\company\\excel报表\\execl-protal\\node_modules\\eslint-loader\\index.js","mtime":1669859218235}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}