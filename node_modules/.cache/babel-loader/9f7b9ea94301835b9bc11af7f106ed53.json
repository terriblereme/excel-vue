{"remainingRequest":"D:\\liu\\company\\hxjrsy_website\\HX\\hxjrsy-protal\\node_modules\\thread-loader\\dist\\cjs.js!D:\\liu\\company\\hxjrsy_website\\HX\\hxjrsy-protal\\node_modules\\babel-loader\\lib\\index.js!D:\\liu\\company\\hxjrsy_website\\HX\\hxjrsy-protal\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!D:\\liu\\company\\hxjrsy_website\\HX\\hxjrsy-protal\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\liu\\company\\hxjrsy_website\\HX\\hxjrsy-protal\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!D:\\liu\\company\\hxjrsy_website\\HX\\hxjrsy-protal\\src\\views\\mobile\\rigister\\register.vue?vue&type=template&id=7fe41c50&scoped=true","dependencies":[{"path":"D:\\liu\\company\\hxjrsy_website\\HX\\hxjrsy-protal\\src\\views\\mobile\\rigister\\register.vue","mtime":1672900703668},{"path":"D:\\liu\\company\\hxjrsy_website\\HX\\hxjrsy-protal\\babel.config.js","mtime":1639197980677},{"path":"D:\\liu\\company\\hxjrsy_website\\HX\\hxjrsy-protal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1669859218110},{"path":"D:\\liu\\company\\hxjrsy_website\\HX\\hxjrsy-protal\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1669859218094},{"path":"D:\\liu\\company\\hxjrsy_website\\HX\\hxjrsy-protal\\node_modules\\babel-loader\\lib\\index.js","mtime":1669859218625},{"path":"D:\\liu\\company\\hxjrsy_website\\HX\\hxjrsy-protal\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1669859219032},{"path":"D:\\liu\\company\\hxjrsy_website\\HX\\hxjrsy-protal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1669859218110},{"path":"D:\\liu\\company\\hxjrsy_website\\HX\\hxjrsy-protal\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1669859218719}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}