{"remainingRequest":"D:\\liu\\company\\excel报表\\execl-protal\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!D:\\liu\\company\\excel报表\\execl-protal\\src\\views\\mobile\\rigister\\register.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\liu\\company\\excel报表\\execl-protal\\src\\views\\mobile\\rigister\\register.vue","mtime":1672900703668},{"path":"D:\\liu\\company\\excel报表\\execl-protal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1669859218110},{"path":"D:\\liu\\company\\excel报表\\execl-protal\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1669859218094},{"path":"D:\\liu\\company\\excel报表\\execl-protal\\node_modules\\babel-loader\\lib\\index.js","mtime":1669859218625},{"path":"D:\\liu\\company\\excel报表\\execl-protal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1669859218110},{"path":"D:\\liu\\company\\excel报表\\execl-protal\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1669859218719}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}